<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mr. Anderson]]></title>
  <link href="http://kmc653.github.io/atom.xml" rel="self"/>
  <link href="http://kmc653.github.io/"/>
  <updated>2015-01-30T11:28:55+08:00</updated>
  <id>http://kmc653.github.io/</id>
  <author>
    <name><![CDATA[Kai-Min Change]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Concerns to DRY up Model]]></title>
    <link href="http://kmc653.github.io/blog/2015/01/29/use-concerns-to-dry-up-model/"/>
    <updated>2015-01-29T19:20:35+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/01/29/use-concerns-to-dry-up-model</id>
    <content type="html"><![CDATA[<p>Different models in Rails application would have the code that have the same logic or functionality. Using <code>concerns</code> to put these same code in a module, which would allow you to use in any models.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Usage of strip, slice and split Methods of String]]></title>
    <link href="http://kmc653.github.io/blog/2014/12/27/the-usage-of-method-number-strip-and-slice-of-string/"/>
    <updated>2014-12-27T19:49:30+08:00</updated>
    <id>http://kmc653.github.io/blog/2014/12/27/the-usage-of-method-number-strip-and-slice-of-string</id>
    <content type="html"><![CDATA[<h1>Strip</h1>

<p>The method <code>strip</code> is used in a string. Returning the same content of string with leading and trailing whitespace removed.</p>

<pre><code>"   Kevin   ".strip     #=&gt; "Kevin"
</code></pre>

<p>The string will be changed if we use <code>strip!</code>. Return <code>nil</code> means the string was not altered.</p>

<pre><code>"Kevin".strip!     #=&gt; nil
</code></pre>

<h1>Slice</h1>

<p>The method <code>slice</code> is used in a string.<br/>
* <em>slice( index ) => str or nil</em><br/>
* <em>slice( start, length ) => str or nil</em><br/>
* <em>slice( range ) => str or nil</em><br/>
* <em>slice( regexp ) => str or nil</em><br/>
* <em>slice( regexp, capture ) => str or nil</em><br/>
* <em>slice( match_str ) => str or nil</em></p>

<pre><code>"kevin".slice(3)     #=&gt; "i"  
"kevin".slice(3, 2)     #=&gt; "in"  
"kevin".slice(1..3)     #=&gt; "evi"  
"kevinaeiou".slice(/[aeiou][0...9]/)
"kevin".slice("v")     #=&gt; "v"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Usage of Module#delegate]]></title>
    <link href="http://kmc653.github.io/blog/2014/12/25/the-usage-of-module-number-delegate/"/>
    <updated>2014-12-25T11:06:29+08:00</updated>
    <id>http://kmc653.github.io/blog/2014/12/25/the-usage-of-module-number-delegate</id>
    <content type="html"><![CDATA[<h1>Delegate</h1>

<p><code>delegate</code> is particularly useful with Active Record associations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Movie &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :director
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Director &lt; ActiveRecord::Base
</span><span class='line'>  # has a string attribute 'name'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>If we want to get the director&rsquo;s name of the movie, we should use <code>@movie.director.name</code>. However, if we use <code>delegate</code> in the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Movie &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :director
</span><span class='line'>  delegate :name, to: :director
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>We can only use <code>@movie.name</code> to get the name of director. Moreover, if we add options <code>prefix: true</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Movie &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :director
</span><span class='line'>  delegate :name, to: :director, prefix: true
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Only use <code>@movie.director_name</code> to get the director&rsquo;s name. It&rsquo;s more readable than before. We can also specify a custom prefix <code>:filmmaker</code>instead of <code>true</code>, then use <code>@movie.filmmaker_name</code> to get the same result.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Usage of Collect &amp; Map Methods]]></title>
    <link href="http://kmc653.github.io/blog/2014/12/21/the-usage-of-collect-and-map-methods/"/>
    <updated>2014-12-21T22:57:15+08:00</updated>
    <id>http://kmc653.github.io/blog/2014/12/21/the-usage-of-collect-and-map-methods</id>
    <content type="html"><![CDATA[<h1>Collect</h1>

<ul>
<li><em>collect { | item | block } => array</em></li>
<li><em>collect => Enumerator</em></li>
</ul>


<p>The method <code>collect</code> is used in an array. Returns a new array with the results of executing block once for each element in array.<br/>
If no block is given, an enummerator is returned instead.</p>

<pre><code>['a', 'b', 'c'].collect{ |letter| letter.capitalize }     #=&gt; ["A", "B", "C"]
</code></pre>

<p>There is a concise way doing the same work:</p>

<pre><code>['a', 'b', 'c'].collect(&amp;:capitalize)     #=&gt; ["A", "B", "C"]
</code></pre>

<p>The element will be replaced with the value returned by block if adding a <code>!</code></p>

<pre><code>a = ['a', 'b', 'c'].collect!(&amp;:capitalize)
a     #=&gt; ["A", "B", "C"]
</code></pre>

<h1>Map</h1>

<ul>
<li><em>map { | item | block } => array</em></li>
<li><em>map => Enumerator</em></li>
</ul>


<p>The method <code>map</code> is also used in an array.</p>

<pre><code>a = ['a', 'b', 'c']
a.map { |x| x + x }     #=&gt; ["aa", "bb", "cc"]
</code></pre>

<p>There is also a shorthand way:</p>

<pre><code>['a', 'b', 'c'].map(&amp;:capitalize)     #=&gt; ["A", "B", "C"]
</code></pre>

<p>The element will be replaced with the value returned by block if adding a <code>!</code></p>

<pre><code>a = ['A', 'B', 'C']
a.map!(&amp;:downcase)
a     #=&gt; ["a", "b", "c"]
</code></pre>
]]></content>
  </entry>
  
</feed>
