<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby on rails, heroku | Mr. Anderson]]></title>
  <link href="http://kmc653.github.io/blog/categories/ruby-on-rails-heroku/atom.xml" rel="self"/>
  <link href="http://kmc653.github.io/"/>
  <updated>2015-02-15T17:31:58+08:00</updated>
  <id>http://kmc653.github.io/</id>
  <author>
    <name><![CDATA[Kai-Min Change]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[use Paratrooper gem to automate the deploy pipeline]]></title>
    <link href="http://kmc653.github.io/blog/2015/02/15/use-paratrooper-gem-to-automate-the-deploy-pipeline/"/>
    <updated>2015-02-15T16:03:19+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/02/15/use-paratrooper-gem-to-automate-the-deploy-pipeline</id>
    <content type="html"><![CDATA[<h1>Paratrooper</h1>

<p>Every time we deploy a rails applicaton to staging server or production server, there will be some steps we need to process ( Turn maintenance page on, git push changes to heroku, run database migrations, turn off maintenance page ). Using <code>paratrooper</code> gem  help us to simplify the process. We&rsquo;re able to deploy our application to the staging server with simply type command <code>rake deploy:staging</code>, and deploy to the production server with command <code>rake deploy:production</code>.</p>

<p>At first, add <code>paratrooper</code> in Gemfile, and then run <code>bundle install</code>.
<code>ruby Gemfile
gem 'paratrooper'
</code></p>

<p>Add a file named <code>deploy.rake</code> and placed it in the lib/tasks directory. Here is what it looks like:
<figure class='code'><figcaption><span>deploy.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">paratrooper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; namespace :deploy do</span>
</span><span class='line'><span class="sr">   desc &amp;lsquo;Deploy app in staging environment&amp;rsquo;</span>
</span><span class='line'><span class="sr">   task :staging do</span>
</span><span class='line'><span class="sr">     deployment = Paratrooper::Deploy.new(&amp;ldquo;amazing-staging-app&amp;rdquo;, tag: &amp;lsquo;staging&amp;rsquo;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">deployment</span><span class="o">.</span><span class="n">deploy</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   desc &amp;lsquo;Deploy app in production environment&amp;rsquo;</span>
</span><span class='line'><span class="sr">   task :production do</span>
</span><span class='line'><span class="sr">     deployment = Paratrooper::Deploy.new(&amp;ldquo;amazing-production-app&amp;rdquo;) do |deploy|</span>
</span><span class='line'><span class="sr">       deploy.tag              = &amp;lsquo;production&amp;rsquo;,</span>
</span><span class='line'><span class="sr">       deploy.match_tag        = &amp;lsquo;staging&amp;rsquo;,</span>
</span><span class='line'><span class="sr">       deploy.maintenance_mode = !ENV[&amp;lsquo;NO_MAINTENANCE&amp;rsquo;]</span>
</span><span class='line'><span class="sr">     end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">deployment</span><span class="o">.</span><span class="n">deploy</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In above, we should modify code from <code>amazing-staging-app</code> and <code>amazing-production-app</code> to our staging and production applications&#8217; name.</p>

<p>It&rsquo;s also important to note that in the line 15 of <code>deploy.rake</code> file, there&rsquo;s a <code>match_tag</code> equals <code>staging</code>, which means we&rsquo;re able to deploy to production server only if the application has been pushed and tested on the staging. This insures that deploying to staging is not to be omitted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[set up a staging server on heroku]]></title>
    <link href="http://kmc653.github.io/blog/2015/02/07/set-up-a-staging-server-on-heroku/"/>
    <updated>2015-02-07T21:37:37+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/02/07/set-up-a-staging-server-on-heroku</id>
    <content type="html"><![CDATA[<p>When developing an application, we always meet a situation is that new features work well in local machine, but break in production server. Hence, it will be better if we can test out new features in a &ldquo;production like&rdquo; environment. The solution is to create a staging server that is similar to production server. We are able to test new functions of the application on staging environment, and then deploy to production environment if everything works well. In the following, I&rsquo;ll introduce how to set up a staging server on heroku when already having a production one.</p>

<p>First of all, in convention, the staging server will be named to have <code>staging</code> word. For example, if the application on heroku named <code>wordsfarm</code>, the staging server can be named <code>staging-wordsfarm</code>.
<code>
$ heroku fork -a wordsfarm staging-wordsfarm
</code>
This <code>fork</code> command does a lot of things. It copies the config vars, data in Postgres and re-provision all add-ons on heroku.</p>

<p>And then, we should add a new remote by using <code>git remote add</code> command:
<code>
$ git remote add staging-wordsfarm git@heroku.com:staging-wordsfarm.git
</code>
We can use <code>git remote -v</code> command to show all remote connections with URL.</p>

<p>After doing these, we can see there is a new application on heroku named <code>staging-wordsfarm</code> with independent database and Add-ons. Therefore, we can test on staging server to keep changes from breaking things on production server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use unicorn as production server to implement concurrent requests]]></title>
    <link href="http://kmc653.github.io/blog/2015/02/05/use-unicorn-as-production-server/"/>
    <updated>2015-02-05T10:33:14+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/02/05/use-unicorn-as-production-server</id>
    <content type="html"><![CDATA[<p>It&rsquo;ll be much efficient use of dyno if a web application that process requests concurrently, instead of process one request at a time. Therefore, we should implement concurrent requests in developing and running production services. Using <a href="https://devcenter.heroku.com/articles/rails-unicorn">Unicorn</a> as web server let Rails applications run concurrently by running multiple Ruby processes in a single dyno.</p>

<h1>Install unicorn &amp; sidekiq gems</h1>

<p>At first, add <code>unicorn</code> and <code>sidekiq</code>in Gemfile, and then run <code>bundle install</code>.
<code>ruby Gemfile
gem 'sidekiq'
gem 'unicorn'
</code></p>

<h1>Apply <code>Redis To Go</code> on Heroku</h1>

<p>We should apply free <a href="https://addons.heroku.com/redistogo">Redis To Go</a> service on heroku to work with sidekiq to make jobs running in the background.</p>

<h1>Create a unicorn.rb file</h1>

<p>Add a <code>unicorn.rb</code> file in <code>config</code>:
<figure class='code'><figcaption><span>unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker_processes</span> <span class="nb">Integer</span><span class="p">(</span><span class="no">ENV</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">WEB_CONCURRENCY</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">15</span>
</span><span class='line'><span class="n">preload_app</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;before_fork do |server, worker|</span>
</span><span class='line'><span class="sr">  Signal.trap &amp;lsquo;TERM&amp;rsquo; do</span>
</span><span class='line'><span class="sr">    puts &amp;lsquo;Unicorn master intercepting TERM and sending myself QUIT instead&amp;rsquo;</span>
</span><span class='line'><span class="sr">    Process.kill &amp;lsquo;QUIT&amp;rsquo;, Process.pid</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">defined?</span><span class="p">(</span><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">disconnect!</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;after_fork do |server, worker|</span>
</span><span class='line'><span class="sr">  Sidekiq.configure_client do |config|</span>
</span><span class='line'><span class="sr">    config.redis = { :size =&gt; 1 }</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  Sidekiq.configure_server do |config|</span>
</span><span class='line'><span class="sr">    config.redis = { :size =&gt; 5 }</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Signal</span><span class="o">.</span><span class="n">trap</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">TERM</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Unicorn</span> <span class="n">worker</span> <span class="n">intercepting</span> <span class="no">TERM</span> <span class="ow">and</span> <span class="n">doing</span> <span class="n">nothing</span><span class="o">.</span> <span class="no">Wait</span> <span class="k">for</span> <span class="n">master</span> <span class="n">to</span> <span class="nb">send</span> <span class="no">QUIT</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  defined?(ActiveRecord::Base) and</span>
</span><span class='line'><span class="sr">    ActiveRecord::Base.establish_connection</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And then, add two lines of command in <code>Procfile</code>:
<code>ruby Procfile
web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
worker: bundle exec sidekiq -e production -C
</code></p>

<p>Carefully, in above setting, there are two dynos, one of them is web dyno, another one is worker dyno. However, in heroku, we have to swipe the credit card if we use more than one dyno.</p>

<p>Therefore, if we just want to have a taste and don&rsquo;t want to pay money, add a line of code in <code>unicorn.rb</code>:
<figure class='code'><figcaption><span>unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker_processes</span> <span class="nb">Integer</span><span class="p">(</span><span class="no">ENV</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">WEB_CONCURRENCY</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">15</span>
</span><span class='line'><span class="n">preload_app</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;before_fork do |server, worker|</span>
</span><span class='line'><span class="sr">  @sidekiq_pid ||= spawn(&amp;ldquo;bundle exec sidekiq -c 2&amp;rdquo;)  # &amp;lt;== this line</span>
</span><span class='line'><span class="sr">  Signal.trap &amp;lsquo;TERM&amp;rsquo; do</span>
</span><span class='line'><span class="sr">    puts &amp;lsquo;Unicorn master intercepting TERM and sending myself QUIT instead&amp;rsquo;</span>
</span><span class='line'><span class="sr">    Process.kill &amp;lsquo;QUIT&amp;rsquo;, Process.pid</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">defined?</span><span class="p">(</span><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">disconnect!</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;after_fork do |server, worker|</span>
</span><span class='line'><span class="sr">  Sidekiq.configure_client do |config|</span>
</span><span class='line'><span class="sr">    config.redis = { :size =&gt; 1 }</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  Sidekiq.configure_server do |config|</span>
</span><span class='line'><span class="sr">    config.redis = { :size =&gt; 5 }</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Signal</span><span class="o">.</span><span class="n">trap</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">TERM</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Unicorn</span> <span class="n">worker</span> <span class="n">intercepting</span> <span class="no">TERM</span> <span class="ow">and</span> <span class="n">doing</span> <span class="n">nothing</span><span class="o">.</span> <span class="no">Wait</span> <span class="k">for</span> <span class="n">master</span> <span class="n">to</span> <span class="nb">send</span> <span class="no">QUIT</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  defined?(ActiveRecord::Base) and</span>
</span><span class='line'><span class="sr">    ActiveRecord::Base.establish_connection</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This line of code means sidekiq workers will be spawned from unicorn within web dyno.</p>

<p>And the <code>Procfile</code> should only be:
<code>ruby Procfile
web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
</code></p>

<p>However, building a real production Rails application, we&rsquo;re not according to the above steps, these just give you a try without pulling out the credit card.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procfile and Foreman]]></title>
    <link href="http://kmc653.github.io/blog/2015/02/01/procfile-and-foreman/"/>
    <updated>2015-02-01T17:39:07+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/02/01/procfile-and-foreman</id>
    <content type="html"><![CDATA[<h1>Procfile</h1>

<p><code>Procfile</code> is a text file, placed in the root of the Rails application, used to declare what commands are run by dynos of the application on the Heroku. We can use Procfile to declare different kind of process type. Each process type is a declaration of command that is executed when a dyno of that process type is started.</p>

<p>The following code is the format of process type, one process per line.
<code>ruby
&lt;process type&gt;: &lt;command&gt;
</code></p>

<p>For example,
<code>ruby
web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
</code></p>

<h1>Foreman</h1>

<p>When we develope and debug an applicaion, the local developement environment is as similar as remote environments will avoid us from expending extra time to fix errors. <code>Foreman</code> is a command-line tool for running <code>Procfile</code> to execute application, which would make local emvironment works like remote&rsquo;s.</p>

<p>Type <code>foreman start</code> in command-line to execute <code>Foreman</code>
<code>
$ foreman start
21:12:35 web.1  | started with pid 25658
21:12:36 web.1  | I, [2015-02-01T21:12:36.014308 #25658]  INFO -- : Refreshing Gem list
21:12:38 web.1  | I, [2015-02-01T21:12:38.087552 #25658]  INFO -- : listening on addr=0.0.0.0:5000 fd=10
21:12:38 web.1  | I, [2015-02-01T21:12:38.256511 #25658]  INFO -- : master process ready
</code>
We can see the application running on the <a href="http://localhost:5000">http://localhost:5000</a></p>
]]></content>
  </entry>
  
</feed>
