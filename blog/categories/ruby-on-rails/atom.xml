<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby on rails | Mr. Anderson]]></title>
  <link href="http://kmc653.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://kmc653.github.io/"/>
  <updated>2015-05-15T14:18:43+08:00</updated>
  <id>http://kmc653.github.io/</id>
  <author>
    <name><![CDATA[Kai-Min Change]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Stripe to charge credit card with custom form]]></title>
    <link href="http://kmc653.github.io/blog/2015/05/03/use-stripe-to-charge-credit-card-with-custom-form/"/>
    <updated>2015-05-03T13:37:25+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/05/03/use-stripe-to-charge-credit-card-with-custom-form</id>
    <content type="html"><![CDATA[<h1>Why use Stripe</h1>

<p>If you want to process credit card payment, a merchant account is needed to accept credit card. Moreover, you also need an account with Authorize.net, which is a gateway that gather credit card charge information from us, process payment, and then deposit the money into your merchant account.</p>

<p>However, Stripe doesn&rsquo;t need a merchant account and gateway. It&rsquo;s responsible for storing payment information, subscription and direct transfer money to your bank account. Furthermore, customer credit card will never flow through your web server by using <code>stripe.js</code>. <code>stripe.js</code> send these information to Stripe directly and get a token as response. You can use this token to process payment.</p>

<h1>Apply an account of Stripe</h1>

<p>You should apply an account on <a href="https://stripe.com/">Stripe</a>. After applying, you will get the keys to communicate with Stripe. Moreover, you also can see the events or logs with your Stripe account.</p>

<h1>Installation</h1>

<p>Add stripe in Gemfile and run <code>bundle install</code>:</p>

<pre><code>gem 'stripe'
</code></pre>

<h1>Payments.js file</h1>

<p>And then, create a <code>payments.js</code> file in <code>app/assets/javascripts</code> path:
<figure class='code'><figcaption><span>payments.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jQuery</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="err">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#payment-form&amp;rsquo;).submit(function(event) {</span>
</span><span class='line'>    <span class="n">var</span> <span class="vg">$form</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">this</span><span class="p">);</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">button</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">prop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">disabled</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="kp">true</span><span class="p">);</span>
</span><span class='line'>    <span class="no">Stripe</span><span class="o">.</span><span class="n">card</span><span class="o">.</span><span class="n">createToken</span><span class="p">(</span><span class="vg">$form</span><span class="p">,</span> <span class="n">stripeResponseHandler</span><span class="p">);</span>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Prevent</span> <span class="n">the</span> <span class="n">form</span> <span class="n">from</span> <span class="n">submitting</span> <span class="n">with</span> <span class="n">the</span> <span class="n">default</span> <span class="n">action</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">function</span> <span class="n">stripeResponseHandler</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="vg">$form</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#payment-form&amp;rsquo;);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Show</span> <span class="n">the</span> <span class="n">errors</span> <span class="n">on</span> <span class="n">the</span> <span class="n">form</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">payment</span><span class="o">-</span><span class="n">errors</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">button</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">prop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">disabled</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="kp">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span> <span class="n">response</span> <span class="n">contains</span> <span class="nb">id</span> <span class="ow">and</span> <span class="n">card</span><span class="p">,</span> <span class="n">which</span> <span class="n">contains</span> <span class="n">additional</span> <span class="n">card</span> <span class="n">details</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">token</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="p">;</span>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Insert</span> <span class="n">the</span> <span class="n">token</span> <span class="n">into</span> <span class="n">the</span> <span class="n">form</span> <span class="n">so</span> <span class="n">it</span> <span class="nb">gets</span> <span class="n">submitted</span> <span class="n">to</span> <span class="n">the</span> <span class="n">server</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;stripeToken&quot;</span> <span class="sr">/&gt;&amp;rsquo;).val(token));</span>
</span><span class='line'><span class="sr">    /</span><span class="o">/</span> <span class="ow">and</span> <span class="n">submit</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">submit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Custome form in view template</h1>

<pre><code class="ruby new.html.haml">= content_for :head do
  %script(type="text/javascript" src="https://js.stripe.com/v2/")
  :javascript
    Stripe.setPublishableKey("#{ENV['STRIPE_PUBLISHABLE_KEY']}");
  = javascript_include_tag 'payments'

= render 'shared/header', header: "Donation"

%h4 Please make a donation with your credit card.
= form_tag donations_path, id: 'payment-form' do
  %fieldset.credit_card
    %span.payment-errors
    .control-group
      %label Credit Card Number
      %input.span3.card-number#card-number(type="text" data-stripe="number")
    .control-group
      %label Security Code
      %input.span3.card-cvc#security-code(type="text" data-stripe="cvc")
    .control-group
      %label Expiration
      = select_month(Date.today, {add_month_numbers: true}, name: nil, data: {stripe: "exp-month"}, class: 'card-expiry-month')
      = select_year(Date.today.year, {start_year: Date.today.year, end_year: Date.today.year + 4}, name: nil, data: {stripe: "exp-year"}, class: 'card-expiry-year')
  %fieldset.actions
    = submit_tag "Submit Payment", class: "btn btn-default"
</code></pre>

<p>Remember to add <code>%script(type="text/javascript" src="https://js.stripe.com/v2/")</code>, Stripe publish key and <code>javascript_include_tag 'payments'</code> in view template to communicate with Stripe.</p>

<h1>Process payment</h1>

<p>When you fill with card information and click <code>Submit Payment</code>, you will get a token from Stripe server, and use this token to process payment.
<figure class='code'><figcaption><span>donations_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DonationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:require_user</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def create</span>
</span><span class='line'><span class="sr">    @user = current_user</span>
</span><span class='line'><span class="sr">    token = params[:stripeToken]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">charge</span> <span class="o">=</span> <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:source</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">token</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;Donation from </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">charge</span><span class="o">.</span><span class="n">successful?</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Thank you for your generous support!&quot;</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">donate_path</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">donate_path</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">In</span> <span class="n">the</span> <span class="n">example</span><span class="p">,</span> <span class="n">it</span> <span class="n">wraps</span> <span class="n">payment</span> <span class="n">process</span> <span class="k">in</span> <span class="n">a</span> <span class="sb">`stripe_wrapper.rb`</span> <span class="n">file</span><span class="o">.</span> <span class="no">The</span> <span class="n">advantages</span> <span class="n">of</span> <span class="n">wrapping</span> <span class="n">api</span> <span class="n">is</span> <span class="n">reusable</span> <span class="ow">and</span> <span class="n">easy</span> <span class="n">to</span> <span class="n">run</span> <span class="nb">test</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;ruby stripe_wrapper.rb</span>
</span><span class='line'><span class="sr">module StripeWrapper</span>
</span><span class='line'><span class="sr">  class Charge</span>
</span><span class='line'><span class="sr">    attr_reader :response, :status&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@response</span> <span class="o">=</span> <span class="n">response</span>
</span><span class='line'>  <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="no">StripeWrapper</span><span class="o">.</span><span class="n">set_api_key</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">Stripe</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:amount</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:currency</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;usd&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:source</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:source</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:description</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="ss">:success</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Stripe</span><span class="o">::</span><span class="no">CardError</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">e</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="ss">:error</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">successful?</span>
</span><span class='line'>  <span class="n">status</span> <span class="o">==</span> <span class="ss">:success</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">error_message</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def self.set_api_key</span>
</span><span class='line'><span class="sr">    Stripe.api_key = ENV[&amp;lsquo;STRIPE_SECRET_KEY&amp;rsquo;]</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Configure API keys</h1>

<p>In the example, I used <code>figaro</code> to configure environment variables.
<figure class='code'><figcaption><span>application.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">STRIPE_PUBLISHABLE_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="nb">test</span> <span class="n">publishable</span> <span class="n">key</span>
</span><span class='line'>  <span class="ss">STRIPE_SECRET_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="nb">test</span> <span class="n">sercet</span> <span class="n">key</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;test:</span>
</span><span class='line'><span class="sr">  STRIPE_PUBLISHABLE_KEY: your test publishable key</span>
</span><span class='line'><span class="sr">  STRIPE_SECRET_KEY: your test sercet key&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">STRIPE_PUBLISHABLE_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="n">live</span> <span class="n">publishable</span> <span class="n">key</span>
</span><span class='line'>  <span class="ss">STRIPE_SECRET_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="n">live</span> <span class="n">secret</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Figaro to Configure Environment Variables]]></title>
    <link href="http://kmc653.github.io/blog/2015/05/03/use-figaro-to-configure-environment-variables/"/>
    <updated>2015-05-03T12:00:18+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/05/03/use-figaro-to-configure-environment-variables</id>
    <content type="html"><![CDATA[<p>In developing web application, we must have some sensitive information that should be hidden. Using <code>figaro</code>, which place sensitive information in a Git-ignored YAML file, can offer this service for us.</p>

<h1>Install Figaro gem</h1>

<p>Add <code>figaro</code> gem in the Gemfile and run <code>bundle install</code></p>

<pre><code>gem "fiagro"
</code></pre>

<p>And then run installation:</p>

<pre><code>$ figaro install
</code></pre>

<p>This command will create a <code>application.yml</code> file in <code>config</code>, and this yml file will also be added in <code>.gitignore</code>. We can place our own configuration in here:
<figure class='code'><figcaption><span>application.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">AWS_ACCESS_KEY_ID</span><span class="p">:</span> <span class="n">xxxxxxxxxx</span>
</span><span class='line'>  <span class="ss">AWS_SECRET_ACCESS_KEY</span><span class="p">:</span> <span class="n">xxxxxxxxxx</span>
</span><span class='line'>  <span class="ss">S3_BUCKET_NAME</span><span class="p">:</span> <span class="n">xxxxxxxxxx</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;test:</span>
</span><span class='line'><span class="sr">  AWS_ACCESS_KEY_ID: xxxxxxxxxx</span>
</span><span class='line'><span class="sr">  AWS_SECRET_ACCESS_KEY: xxxxxxxxxx</span>
</span><span class='line'><span class="sr">  S3_BUCKET_NAME: xxxxxxxxxx&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">AWS_ACCESS_KEY_ID</span><span class="p">:</span> <span class="n">xxxxxxxxxx</span>
</span><span class='line'>  <span class="ss">AWS_SECRET_ACCESS_KEY</span><span class="p">:</span> <span class="n">xxxxxxxxxx</span>
</span><span class='line'>  <span class="ss">S3_BUCKET_NAME</span><span class="p">:</span> <span class="n">xxxxxxxxxx</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="sb">``</span>
</span><span class='line'><span class="no">For</span> <span class="n">example</span><span class="p">,</span> <span class="k">if</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">get</span><span class="o">&lt;</span><span class="sr">/code&gt;S3_BUCKET_NAME&lt;code&gt;, you use&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="no">ENV</span><span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">S3_BUCKET_NAME</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]</span><span class="sb">`.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;Set Configuration to Heroku&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;&lt;code&gt;figaro&lt;/code&gt; offer an easy way to set remote Heroku configuration:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;pre&gt;&lt;code&gt;$ figaro heroku:set -e production</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;This command will set environment variables to your application on the Heroku.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;By the way, the environment option for the &lt;code&gt;heroku:set&lt;/code&gt; is required. In above example, the environment is set to &lt;code&gt;production&lt;/code&gt;. The default will be &lt;code&gt;development&lt;/code&gt; if unspecified.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Reference from &lt;a href=&quot;https://github.com/laserlemon/figaro&quot;&gt;laserlemon/figaro&lt;/a&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="sb">]]&gt;&lt;/content&gt;</span>
</span><span class='line'><span class="sb">  &lt;/entry&gt;</span>
</span><span class='line'><span class="sb">  </span>
</span><span class='line'><span class="sb">  &lt;entry&gt;</span>
</span><span class='line'><span class="sb">    &lt;title type=&quot;html&quot;&gt;&lt;![CDATA[File Uploading on Amazon S3 with Carrierwave-aws]]&gt;&lt;/title&gt;</span>
</span><span class='line'><span class="sb">    &lt;link href=&quot;http://kmc653.github.io/blog/2015/04/30/file-uploading-on-amazon-s3-with-carrierwave-aws/&quot;/&gt;</span>
</span><span class='line'><span class="sb">    &lt;updated&gt;2015-04-30T12:10:17+08:00&lt;/updated&gt;</span>
</span><span class='line'><span class="sb">    &lt;id&gt;http://kmc653.github.io/blog/2015/04/30/file-uploading-on-amazon-s3-with-carrierwave-aws&lt;/id&gt;</span>
</span><span class='line'><span class="sb">    &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;p&gt;Sometimes websites offer users to upload files or images. We can use Carrierwave-aws gem to upload files on Amazon S3 (Amazon simple Storage Service).&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;In the following example, I would like to upload large_cover and small_cover images of the videos. At first, create a migration to add a string column to the model:</span>
</span><span class='line'><span class="sb">&lt;code&gt;</span>
</span><span class='line'><span class="sb">$ rails g migration add_large_cover_and _small_cover_to_videos</span>
</span><span class='line'><span class="sb">$ rake db:migrate</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;pre&gt;&lt;code class=&quot;ruby 20150127011135_add_large_cover_and_small_cover_to_videos.rb&quot;&gt;class AddLargeCoverAndSmallCoverToVideos &amp;lt; ActiveRecord::Migration</span>
</span><span class='line'><span class="sb">  def change</span>
</span><span class='line'><span class="sb">    add_column :videos, :large_cover, :string</span>
</span><span class='line'><span class="sb">    add_column :videos, :small_cover, :string</span>
</span><span class='line'><span class="sb">  end</span>
</span><span class='line'><span class="sb">end</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;And then, open the &lt;code&gt;video&lt;/code&gt; model and mount the uploader:</span>
</span><span class='line'><span class="sb">&lt;code&gt;ruby video.rb</span>
</span><span class='line'><span class="sb">class Video &amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sb">  mount_uploader :large_cover, LargeCoverUploader</span>
</span><span class='line'><span class="sb">  mount_uploader :small_cover, SmallCoverUploader</span>
</span><span class='line'><span class="sb">end</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Create a &lt;code&gt;uploaders&lt;/code&gt; directory in &lt;code&gt;app&lt;/code&gt; directory, and put &lt;code&gt;large_cover_uploader.rb&lt;/code&gt; and &lt;code&gt;small_cover_uploader.rb&lt;/code&gt; files in here. In these two files, we can customize our uploader, such as the path of storage or the size of image, etc.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;Resize the image&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;We should install &lt;code&gt;Imagemagick&lt;/code&gt; and &lt;code&gt;MiniMagick&lt;/code&gt; to do image resizing. MiniMagick is a Ruby interface for Imagemagick, so we should install Imagemagick first, and then install MiniMagick.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Add &lt;code&gt;carrierwave-aws&lt;/code&gt; and &lt;code&gt;mini_magick&lt;/code&gt;in Gemfile, and then run &lt;code&gt;bundle install&lt;/code&gt;.</span>
</span><span class='line'><span class="sb">&lt;code&gt;ruby Gemfile</span>
</span><span class='line'><span class="sb">gem &#39;carrierwave-aws&#39;</span>
</span><span class='line'><span class="sb">gem &#39;mini_magick&#39;</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Customize the image size in the &lt;code&gt;large_cover_uploader&lt;/code&gt; and &lt;code&gt;small_cover_uploader&lt;/code&gt; files:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;pre&gt;&lt;code class=&quot;ruby large_cover_uploader.rb&quot;&gt;class LargeCoverUploader &amp;lt; CarrierWave::Uploader::Base</span>
</span><span class='line'><span class="sb">  include CarrierWave::MiniMagick</span>
</span><span class='line'>
</span><span class='line'><span class="sb">  process :resize_to_fill =&amp;gt; [655, 375]</span>
</span><span class='line'><span class="sb">end</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;pre&gt;&lt;code class=&quot;ruby small_cover_uploader.rb&quot;&gt;class SmallCoverUploader &amp;lt; CarrierWave::Uploader::Base</span>
</span><span class='line'><span class="sb">  include CarrierWave::MiniMagick</span>
</span><span class='line'>
</span><span class='line'><span class="sb">  process :resize_to_fill =&amp;gt; [166, 236]</span>
</span><span class='line'><span class="sb">end</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;Configure Amazon web service&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Before trying to use Amazon web service, we should apply an &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt; account first. After having an account, we should create a new user and get &lt;code&gt;Access Key&lt;/code&gt; and &lt;code&gt;Secret Access Key&lt;/code&gt; of this user. And then creating a &lt;code&gt;Bucket&lt;/code&gt; for the web app. There&amp;rsquo;s a blog we can follow: &lt;a href=&quot;http://blog.danielle.tuckerlabs.com/post/60491757671/creating-a-simple-aws-s3-bucket-with-iam-access#_=_&quot;&gt;http://blog.danielle.tuckerlabs.com/post/60491757671/creating-a-simple-aws-s3-bucket-with-iam-access#_=_&lt;/a&gt; .&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;After creating a bucket, we should add a file called &lt;code&gt;carrierwave.rb&lt;/code&gt;  in &lt;code&gt;/config/initializers&lt;/code&gt;:</span>
</span><span class='line'><span class="sb">&lt;code&gt;ruby carrierwave.rb</span>
</span><span class='line'><span class="sb">CarrierWave.configure do |config|</span>
</span><span class='line'><span class="sb">  if Rails.env.staging? || Rails.env.production?</span>
</span><span class='line'><span class="sb">    config.storage    = :aws</span>
</span><span class='line'><span class="sb">    config.aws_acl    = :public_read</span>
</span><span class='line'><span class="sb">    config.aws_credentials = {</span>
</span><span class='line'><span class="sb">      access_key_id:      ENV.fetch(&#39;AWS_ACCESS_KEY_ID&#39;),</span>
</span><span class='line'><span class="sb">      secret_access_key:  ENV.fetch(&#39;AWS_SECRET_ACCESS_KEY&#39;)</span>
</span><span class='line'><span class="sb">    }</span>
</span><span class='line'><span class="sb">    config.aws_bucket = ENV.fetch(&#39;S3_BUCKET_NAME&#39;)</span>
</span><span class='line'><span class="sb">  else</span>
</span><span class='line'><span class="sb">    config.storage = :file</span>
</span><span class='line'><span class="sb">    config.enable_processing = Rails.env.development?</span>
</span><span class='line'><span class="sb">  end</span>
</span><span class='line'><span class="sb">end</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Using &lt;a href=&quot;https://github.com/laserlemon/figaro&quot;&gt;Figaro&lt;/a&gt; to configure environment variables which are set in the &lt;code&gt;application.yml&lt;/code&gt; file.&lt;/p&gt;</span>
</span><span class='line'><span class="sb">]]&gt;&lt;/content&gt;</span>
</span><span class='line'><span class="sb">  &lt;/entry&gt;</span>
</span><span class='line'><span class="sb">  </span>
</span><span class='line'><span class="sb">  &lt;entry&gt;</span>
</span><span class='line'><span class="sb">    &lt;title type=&quot;html&quot;&gt;&lt;![CDATA[Use Sidekiq to Send Emails from Background Jobs]]&gt;&lt;/title&gt;</span>
</span><span class='line'><span class="sb">    &lt;link href=&quot;http://kmc653.github.io/blog/2015/01/31/use-sidekiq-to-send-emails-from-background-jobs/&quot;/&gt;</span>
</span><span class='line'><span class="sb">    &lt;updated&gt;2015-01-31T15:41:25+08:00&lt;/updated&gt;</span>
</span><span class='line'><span class="sb">    &lt;id&gt;http://kmc653.github.io/blog/2015/01/31/use-sidekiq-to-send-emails-from-background-jobs&lt;/id&gt;</span>
</span><span class='line'><span class="sb">    &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;p&gt;In Rails application, we usually send emails to notify users of something. Sending emails would not be fast because it need to rely on third party service ( e.q., Google, Yahoo, Mailgun ). We can put sending action in background process to make sure that application won&amp;rsquo;t be held up.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;Sidekiq&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;We can use sidekiq to make the jobs running in the background. It will avoid our app getting stuck if one of the processes broke.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;At first, add gem &lt;code&gt;sidekiq&lt;/code&gt; in &lt;code&gt;Gemfile&lt;/code&gt;, and then run &lt;code&gt;bundle install&lt;/code&gt; from command line</span>
</span><span class='line'><span class="sb">&lt;code&gt;ruby Gemfile</span>
</span><span class='line'><span class="sb">gem &#39;sidekiq&#39;</span>
</span><span class='line'><span class="sb">&lt;/code&gt;</span>
</span><span class='line'><span class="sb">For instance, if we want to send an invitation email to user, the code should be</span>
</span><span class='line'><span class="sb">&lt;code&gt;ruby</span>
</span><span class='line'><span class="sb">AppMailer.send_invitation_email(@invitation).deliver</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Using &lt;code&gt;sidekiq&lt;/code&gt;, we add &lt;code&gt;delay&lt;/code&gt; to make sending action processing in background.</span>
</span><span class='line'><span class="sb">&lt;code&gt;ruby</span>
</span><span class='line'><span class="sb">AppMailer.delay.send_invitation_email(@invitation)</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;We have to install &lt;code&gt;redis&lt;/code&gt; server if we would like to set up background job processing locally. we can get Redis from here: &lt;a href=&quot;http://redis.io/download&quot;&gt;http://redis.io/download&lt;/a&gt; .&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;Typing &lt;code&gt;redis-server&lt;/code&gt; to run redis, and then type &lt;code&gt;bundle exec sidekiq&lt;/code&gt; on application to execute sidekiq, and then run Rails applicaion server to send emails.&lt;/p&gt;</span>
</span><span class='line'><span class="sb">]]&gt;&lt;/content&gt;</span>
</span><span class='line'><span class="sb">  &lt;/entry&gt;</span>
</span><span class='line'><span class="sb">  </span>
</span><span class='line'><span class="sb">  &lt;entry&gt;</span>
</span><span class='line'><span class="sb">    &lt;title type=&quot;html&quot;&gt;&lt;![CDATA[Use Concerns to DRY up Model]]&gt;&lt;/title&gt;</span>
</span><span class='line'><span class="sb">    &lt;link href=&quot;http://kmc653.github.io/blog/2015/01/29/use-concerns-to-dry-up-model/&quot;/&gt;</span>
</span><span class='line'><span class="sb">    &lt;updated&gt;2015-01-29T19:20:35+08:00&lt;/updated&gt;</span>
</span><span class='line'><span class="sb">    &lt;id&gt;http://kmc653.github.io/blog/2015/01/29/use-concerns-to-dry-up-model&lt;/id&gt;</span>
</span><span class='line'><span class="sb">    &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;p&gt;Different models in Rails application would have the code that have the same logic or functionality. Using &lt;code&gt;concerns&lt;/code&gt; to put these same code in a module, which allow you to use in any models without repeating code.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;Set the path of module&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;At first, we should add a line of code in &lt;code&gt;config/application.rb&lt;/code&gt; to tell our app where to load the module file.</span>
</span><span class='line'><span class="sb"><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/span&gt;</span>
</span><span class='line'><span class="sr">&lt;/s</span><span class="n">pan</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;sb&quot;</span><span class="o">&gt;</span><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/span&gt;&lt;span class=&quot;si&quot;&gt;</span><span class="si">#{</span><span class="o">&lt;</span><span class="sr">/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/s</span><span class="n">pan</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;o&quot;</span><span class="o">&gt;.</span><span class="n">&lt;</span><span class="sr">/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/s</span><span class="n">pan</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;si&quot;</span><span class="o">&gt;</span><span class="si">}</span><span class="sr">&lt;/s</span><span class="n">pan</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;sb&quot;</span><span class="o">&gt;</span><span class="sr">/lib&amp;amp;rdquo;&lt;/s</span><span class="n">pan</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sb&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;Put the same functional code in module&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;For instance, there is a invitation model which would generate token before creating a invitation.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>ruby invitation.rb
class Invitation &lt; ActiveRecord::Base
  before_create :generate_token</p>

<p>  belongs_to :inviter, class_name: &ldquo;User&rdquo;</p>

<p>  validates_presence_of :recipient_name, :recipient_email, :message</p>

<p>  def generate_token
      self.token = SecureRandom.urlsafe_base64
  end
end
<code>
We're able to put `before_create` and `generate_token` method in a module named `Tokenable`.
</code>ruby tokenable.rb
module Tokenable
  extend ActiveSupport::Concern</p>

<p>  included do
    before_create :generate_token</p>

<pre><code>def generate_token
  self.token = SecureRandom.urlsafe_base64
end
</code></pre>

<p>  end
end
<code>
Afterward, we add `include` following the name of module in invitation model.
</code> ruby invitation.rb
class Invitation &lt; ActiveRecord::Base
  include Tokenable</p>

<p>  belongs_to :inviter, class_name: &ldquo;User&rdquo;</p>

<p>  validates_presence_of :recipient_name, :recipient_email, :message
end
&#8220;`
Therefore, there is no need to have redundant code to acquire the same functionality.</p>
]]></content>
  </entry>
  
</feed>
