<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby on rails | Mr. Anderson]]></title>
  <link href="http://kmc653.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://kmc653.github.io/"/>
  <updated>2015-05-03T13:23:07+08:00</updated>
  <id>http://kmc653.github.io/</id>
  <author>
    <name><![CDATA[Kai-Min Change]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[File Uploading on Amazon S3 with Carrierwave-aws]]></title>
    <link href="http://kmc653.github.io/blog/2015/04/30/file-uploading-on-amazon-s3-with-carrierwave-aws/"/>
    <updated>2015-04-30T12:10:17+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/04/30/file-uploading-on-amazon-s3-with-carrierwave-aws</id>
    <content type="html"><![CDATA[<p>Sometimes websites offer users to upload files or images. We can use Carrierwave-aws gem to upload files on Amazon S3 (Amazon simple Storage Service).</p>

<p>In the following example, I would like to upload large_cover and small_cover images of the videos. At first, create a migration to add a string column to the model:
<code>
$ rails g migration add_large_cover_and _small_cover_to_videos
$ rake db:migrate
</code></p>

<pre><code class="ruby 20150127011135_add_large_cover_and_small_cover_to_videos.rb">class AddLargeCoverAndSmallCoverToVideos &lt; ActiveRecord::Migration
  def change
    add_column :videos, :large_cover, :string
    add_column :videos, :small_cover, :string
  end
end
</code></pre>

<p>And then, open the <code>video</code> model and mount the uploader:
<code>ruby video.rb
class Video &lt; ActiveRecord::Base
  mount_uploader :large_cover, LargeCoverUploader
  mount_uploader :small_cover, SmallCoverUploader
end
</code></p>

<p>Create a <code>uploaders</code> directory in <code>app</code> directory, and put <code>large_cover_uploader.rb</code> and <code>small_cover_uploader.rb</code> files in here. In these two files, we can customize our uploader, such as the path of storage or the size of image, etc.</p>

<h1>Resize the image</h1>

<p>We should install <code>Imagemagick</code> and <code>MiniMagick</code> to do image resizing. MiniMagick is a Ruby interface for Imagemagick, so we should install Imagemagick first, and then install MiniMagick.</p>

<p>Add <code>carrierwave-aws</code> and <code>mini_magick</code>in Gemfile, and then run <code>bundle install</code>.
<code>ruby Gemfile
gem 'carrierwave-aws'
gem 'mini_magick'
</code></p>

<p>Customize the image size in the <code>large_cover_uploader</code> and <code>small_cover_uploader</code> files:</p>

<pre><code class="ruby large_cover_uploader.rb">class LargeCoverUploader &lt; CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick

  process :resize_to_fill =&gt; [655, 375]
end
</code></pre>

<pre><code class="ruby small_cover_uploader.rb">class SmallCoverUploader &lt; CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick

  process :resize_to_fill =&gt; [166, 236]
end
</code></pre>

<h1>Configure Amazon web service</h1>

<p>Before trying to use Amazon web service, we should apply an <a href="http://aws.amazon.com/">AWS</a> account first. After having an account, we should create a new user and get <code>Access Key</code> and <code>Secret Access Key</code> of this user. And then creating a <code>Bucket</code> for the web app. There&rsquo;s a blog we can follow: <a href="http://blog.danielle.tuckerlabs.com/post/60491757671/creating-a-simple-aws-s3-bucket-with-iam-access#_=_">http://blog.danielle.tuckerlabs.com/post/60491757671/creating-a-simple-aws-s3-bucket-with-iam-access#_=_</a> .</p>

<p>After creating a bucket, we should add a file called <code>carrierwave.rb</code>  in <code>/config/initializers</code>:
<code>ruby carrierwave.rb
CarrierWave.configure do |config|
  if Rails.env.staging? || Rails.env.production?
    config.storage    = :aws
    config.aws_acl    = :public_read
    config.aws_credentials = {
      access_key_id:      ENV.fetch('AWS_ACCESS_KEY_ID'),
      secret_access_key:  ENV.fetch('AWS_SECRET_ACCESS_KEY')
    }
    config.aws_bucket = ENV.fetch('S3_BUCKET_NAME')
  else
    config.storage = :file
    config.enable_processing = Rails.env.development?
  end
end
</code></p>

<p>Using <a href="https://github.com/laserlemon/figaro">Figaro</a> to configure environment variables which are set in the <code>application.yml</code> file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Sidekiq to Send Emails from Background Jobs]]></title>
    <link href="http://kmc653.github.io/blog/2015/01/31/use-sidekiq-to-send-emails-from-background-jobs/"/>
    <updated>2015-01-31T15:41:25+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/01/31/use-sidekiq-to-send-emails-from-background-jobs</id>
    <content type="html"><![CDATA[<p>In Rails application, we usually send emails to notify users of something. Sending emails would not be fast because it need to rely on third party service ( e.q., Google, Yahoo, Mailgun ). We can put sending action in background process to make sure that application won&rsquo;t be held up.</p>

<h1>Sidekiq</h1>

<p>We can use sidekiq to make the jobs running in the background. It will avoid our app getting stuck if one of the processes broke.</p>

<p>At first, add gem <code>sidekiq</code> in <code>Gemfile</code>, and then run <code>bundle install</code> from command line
<code>ruby Gemfile
gem 'sidekiq'
</code>
For instance, if we want to send an invitation email to user, the code should be
<code>ruby
AppMailer.send_invitation_email(@invitation).deliver
</code></p>

<p>Using <code>sidekiq</code>, we add <code>delay</code> to make sending action processing in background.
<code>ruby
AppMailer.delay.send_invitation_email(@invitation)
</code></p>

<p>We have to install <code>redis</code> server if we would like to set up background job processing locally. we can get Redis from here: <a href="http://redis.io/download">http://redis.io/download</a> .</p>

<p>Typing <code>redis-server</code> to run redis, and then type <code>bundle exec sidekiq</code> on application to execute sidekiq, and then run Rails applicaion server to send emails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Concerns to DRY up Model]]></title>
    <link href="http://kmc653.github.io/blog/2015/01/29/use-concerns-to-dry-up-model/"/>
    <updated>2015-01-29T19:20:35+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/01/29/use-concerns-to-dry-up-model</id>
    <content type="html"><![CDATA[<p>Different models in Rails application would have the code that have the same logic or functionality. Using <code>concerns</code> to put these same code in a module, which allow you to use in any models without repeating code.</p>

<h1>Set the path of module</h1>

<p>At first, we should add a line of code in <code>config/application.rb</code> to tell our app where to load the module file.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Rails.root}/lib&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Put the same functional code in module</h1>

<p>For instance, there is a invitation model which would generate token before creating a invitation.
<figure class='code'><figcaption><span>invitation.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Invitation</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:generate_token</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  belongs_to :inviter, class_name: &amp;ldquo;User&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">validates_presence_of</span> <span class="ss">:recipient_name</span><span class="p">,</span> <span class="ss">:recipient_email</span><span class="p">,</span> <span class="ss">:message</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def generate_token</span>
</span><span class='line'><span class="sr">      self.token = SecureRandom.urlsafe_base64</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;code&gt;</span>
</span><span class='line'><span class="sr">We&#39;re able to put `before_create` and `generate_token` method in a module named `Tokenable`.</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ruby</span> <span class="n">tokenable</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Tokenable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  included do</span>
</span><span class='line'><span class="sr">    before_create :generate_token&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">generate_token</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">urlsafe_base64</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">Afterward</span><span class="p">,</span> <span class="n">we</span> <span class="n">add</span> <span class="sb">`include`</span> <span class="n">following</span> <span class="n">the</span> <span class="nb">name</span> <span class="n">of</span> <span class="k">module</span> <span class="nn">in</span> <span class="n">invitation</span> <span class="n">model</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt; ruby invitation.rb</span>
</span><span class='line'><span class="sr">class Invitation &amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sr">  include Tokenable&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">belongs_to</span> <span class="ss">:inviter</span><span class="p">,</span> <span class="ss">class_name</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">User</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  validates_presence_of :recipient_name, :recipient_email, :message</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure>
Therefore, there is no need to have redundant code to acquire the same functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Usage of Module#delegate]]></title>
    <link href="http://kmc653.github.io/blog/2014/12/25/the-usage-of-module-number-delegate/"/>
    <updated>2014-12-25T11:06:29+08:00</updated>
    <id>http://kmc653.github.io/blog/2014/12/25/the-usage-of-module-number-delegate</id>
    <content type="html"><![CDATA[<h1>Delegate</h1>

<p><code>delegate</code> is particularly useful with Active Record associations:<br/>
&#8220;`
class Movie &lt; ActiveRecord::Base
  belongs_to :director
end</p>

<p>class Director &lt; ActiveRecord::Base
  # has a string attribute &lsquo;name&rsquo;
end
<code>
If we want to get the director's name of the movie, we should use `@movie.director.name`. However, if we use `delegate` in the code:
</code>
class Movie &lt; ActiveRecord::Base
  belongs_to :director
  delegate :name, to: :director
end
<code>
We can only use `@movie.name` to get the name of director. Moreover, if we add options `prefix: true`:
</code>
class Movie &lt; ActiveRecord::Base
  belongs_to :director
  delegate :name, to: :director, prefix: true
end
<code>``
Only use</code>@movie.director_name<code>to get the director's name. It's more readable than before. We can also specify a custom prefix</code>:filmmaker<code>instead of</code>true<code>, then use</code>@movie.filmmaker_name` to get the same result.</p>
]]></content>
  </entry>
  
</feed>
