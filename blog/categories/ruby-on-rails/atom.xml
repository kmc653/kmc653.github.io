<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby on rails | Mr. Anderson]]></title>
  <link href="http://kmc653.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://kmc653.github.io/"/>
  <updated>2015-06-13T16:47:42+08:00</updated>
  <id>http://kmc653.github.io/</id>
  <author>
    <name><![CDATA[Kai-Min Change]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Member Routes and Collection Routes]]></title>
    <link href="http://kmc653.github.io/blog/2015/05/21/member-routes-and-collection-routes/"/>
    <updated>2015-05-21T22:01:18+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/05/21/member-routes-and-collection-routes</id>
    <content type="html"><![CDATA[<p>We are able to use collection or individual members of the collection to create additional routes, rather than just seven routes of default.</p>

<h1>Member routes</h1>

<p>Add a <code>member</code> block into a resource block:</p>

<pre><code>resources :conversations, only: [:index, :show, :destroy] do
  member do
    post :reply
  end
end
</code></pre>

<p>After running <code>rake routes</code> in command, it will show:</p>

<pre><code>            Prefix Verb   URI Pattern                               Controller#Action
reply_conversation POST   /conversations/:id/reply(.:format)        conversations#reply
</code></pre>

<p>It will also create the <code>reply_conversation_path</code> and <code>reply_conversation_url</code> helpers.</p>

<p>You also can do like this if you only have a member route:</p>

<pre><code>resources :conversations, only: [:index, :show, :destroy] do
  post :reply, on: :member
end
</code></pre>

<h1>Collection routes</h1>

<p>Add a <code>collection</code> block into a resource block:</p>

<pre><code>resources :videos do
  collection do
    get :search
  end
end
</code></pre>

<p>After running <code>rake routes</code> in command, it will show:</p>

<pre><code>       Prefix Verb   URI Pattern                             Controller#Action
search_videos GET    /videos/search(.:format)                videos#search
</code></pre>

<p>You also can do like this if you only have a member route:</p>

<pre><code>resources :videos do
  get :search, on: :collection
end
</code></pre>

<p>Reference from <a href="http://guides.rubyonrails.org/routing.html">RailsGuides</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Stripe to charge credit card with custom form]]></title>
    <link href="http://kmc653.github.io/blog/2015/05/03/use-stripe-to-charge-credit-card-with-custom-form/"/>
    <updated>2015-05-03T13:37:25+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/05/03/use-stripe-to-charge-credit-card-with-custom-form</id>
    <content type="html"><![CDATA[<h1>Why use Stripe</h1>

<p>If you want to process credit card payment, a merchant account is needed to accept credit card. Moreover, you also need an account with Authorize.net, which is a gateway that gather credit card charge information from us, process payment, and then deposit the money into your merchant account.</p>

<p>However, Stripe doesn&rsquo;t need a merchant account and gateway. It&rsquo;s responsible for storing payment information, subscription and direct transfer money to your bank account. Furthermore, customer credit card will never flow through your web server by using <code>stripe.js</code>. <code>stripe.js</code> send these information to Stripe directly and get a token as response. You can use this token to process payment.</p>

<h1>Apply an account of Stripe</h1>

<p>You should apply an account on <a href="https://stripe.com/">Stripe</a>. After applying, you will get the keys to communicate with Stripe. Moreover, you also can see the events or logs with your Stripe account.</p>

<h1>Installation</h1>

<p>Add stripe in Gemfile and run <code>bundle install</code>:</p>

<pre><code>gem 'stripe'
</code></pre>

<h1>Payments.js file</h1>

<p>And then, create a <code>payments.js</code> file in <code>app/assets/javascripts</code> path:
<figure class='code'><figcaption><span>payments.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jQuery</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="err">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#payment-form&amp;rsquo;).submit(function(event) {</span>
</span><span class='line'>    <span class="n">var</span> <span class="vg">$form</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="n">this</span><span class="p">);</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">button</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">prop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">disabled</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="kp">true</span><span class="p">);</span>
</span><span class='line'>    <span class="no">Stripe</span><span class="o">.</span><span class="n">card</span><span class="o">.</span><span class="n">createToken</span><span class="p">(</span><span class="vg">$form</span><span class="p">,</span> <span class="n">stripeResponseHandler</span><span class="p">);</span>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Prevent</span> <span class="n">the</span> <span class="n">form</span> <span class="n">from</span> <span class="n">submitting</span> <span class="n">with</span> <span class="n">the</span> <span class="n">default</span> <span class="n">action</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">function</span> <span class="n">stripeResponseHandler</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="vg">$form</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#payment-form&amp;rsquo;);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Show</span> <span class="n">the</span> <span class="n">errors</span> <span class="n">on</span> <span class="n">the</span> <span class="n">form</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">payment</span><span class="o">-</span><span class="n">errors</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">button</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">prop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">disabled</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="kp">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span> <span class="n">response</span> <span class="n">contains</span> <span class="nb">id</span> <span class="ow">and</span> <span class="n">card</span><span class="p">,</span> <span class="n">which</span> <span class="n">contains</span> <span class="n">additional</span> <span class="n">card</span> <span class="n">details</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">token</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">id</span><span class="p">;</span>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Insert</span> <span class="n">the</span> <span class="n">token</span> <span class="n">into</span> <span class="n">the</span> <span class="n">form</span> <span class="n">so</span> <span class="n">it</span> <span class="nb">gets</span> <span class="n">submitted</span> <span class="n">to</span> <span class="n">the</span> <span class="n">server</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;stripeToken&quot;</span> <span class="sr">/&gt;&amp;rsquo;).val(token));</span>
</span><span class='line'><span class="sr">    /</span><span class="o">/</span> <span class="ow">and</span> <span class="n">submit</span>
</span><span class='line'>    <span class="vg">$form</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">submit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Custome form in view template</h1>

<pre><code class="ruby new.html.haml">= content_for :head do
  %script(type="text/javascript" src="https://js.stripe.com/v2/")
  :javascript
    Stripe.setPublishableKey("#{ENV['STRIPE_PUBLISHABLE_KEY']}");
  = javascript_include_tag 'payments'

= render 'shared/header', header: "Donation"

%h4 Please make a donation with your credit card.
= form_tag donations_path, id: 'payment-form' do
  %fieldset.credit_card
    %span.payment-errors
    .control-group
      %label Credit Card Number
      %input.span3.card-number#card-number(type="text" data-stripe="number")
    .control-group
      %label Security Code
      %input.span3.card-cvc#security-code(type="text" data-stripe="cvc")
    .control-group
      %label Expiration
      = select_month(Date.today, {add_month_numbers: true}, name: nil, data: {stripe: "exp-month"}, class: 'card-expiry-month')
      = select_year(Date.today.year, {start_year: Date.today.year, end_year: Date.today.year + 4}, name: nil, data: {stripe: "exp-year"}, class: 'card-expiry-year')
  %fieldset.actions
    = submit_tag "Submit Payment", class: "btn btn-default"
</code></pre>

<p>Remember to add <code>%script(type="text/javascript" src="https://js.stripe.com/v2/")</code>, Stripe publish key and <code>javascript_include_tag 'payments'</code> in view template to communicate with Stripe.</p>

<h1>Process payment</h1>

<p>When you fill with card information and click <code>Submit Payment</code>, you will get a token from Stripe server, and use this token to process payment.
<figure class='code'><figcaption><span>donations_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DonationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:require_user</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def create</span>
</span><span class='line'><span class="sr">    @user = current_user</span>
</span><span class='line'><span class="sr">    token = params[:stripeToken]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">charge</span> <span class="o">=</span> <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:source</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">token</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;Donation from </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">charge</span><span class="o">.</span><span class="n">successful?</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Thank you for your generous support!&quot;</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">donate_path</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">donate_path</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">In</span> <span class="n">the</span> <span class="n">example</span><span class="p">,</span> <span class="n">it</span> <span class="n">wraps</span> <span class="n">payment</span> <span class="n">process</span> <span class="k">in</span> <span class="n">a</span> <span class="sb">`stripe_wrapper.rb`</span> <span class="n">file</span><span class="o">.</span> <span class="no">The</span> <span class="n">advantages</span> <span class="n">of</span> <span class="n">wrapping</span> <span class="n">api</span> <span class="n">is</span> <span class="n">reusable</span> <span class="ow">and</span> <span class="n">easy</span> <span class="n">to</span> <span class="n">run</span> <span class="nb">test</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;ruby stripe_wrapper.rb</span>
</span><span class='line'><span class="sr">module StripeWrapper</span>
</span><span class='line'><span class="sr">  class Charge</span>
</span><span class='line'><span class="sr">    attr_reader :response, :status&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@response</span> <span class="o">=</span> <span class="n">response</span>
</span><span class='line'>  <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="no">StripeWrapper</span><span class="o">.</span><span class="n">set_api_key</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">Stripe</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:amount</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:currency</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;usd&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:source</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:source</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:description</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="ss">:success</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Stripe</span><span class="o">::</span><span class="no">CardError</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">e</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="ss">:error</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">successful?</span>
</span><span class='line'>  <span class="n">status</span> <span class="o">==</span> <span class="ss">:success</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">error_message</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def self.set_api_key</span>
</span><span class='line'><span class="sr">    Stripe.api_key = ENV[&amp;lsquo;STRIPE_SECRET_KEY&amp;rsquo;]</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Configure API keys</h1>

<p>In the example, I used <code>figaro</code> to configure environment variables.
<figure class='code'><figcaption><span>application.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">STRIPE_PUBLISHABLE_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="nb">test</span> <span class="n">publishable</span> <span class="n">key</span>
</span><span class='line'>  <span class="ss">STRIPE_SECRET_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="nb">test</span> <span class="n">sercet</span> <span class="n">key</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;test:</span>
</span><span class='line'><span class="sr">  STRIPE_PUBLISHABLE_KEY: your test publishable key</span>
</span><span class='line'><span class="sr">  STRIPE_SECRET_KEY: your test sercet key&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">STRIPE_PUBLISHABLE_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="n">live</span> <span class="n">publishable</span> <span class="n">key</span>
</span><span class='line'>  <span class="ss">STRIPE_SECRET_KEY</span><span class="p">:</span> <span class="n">your</span> <span class="n">live</span> <span class="n">secret</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Figaro to Configure Environment Variables]]></title>
    <link href="http://kmc653.github.io/blog/2015/05/03/use-figaro-to-configure-environment-variables/"/>
    <updated>2015-05-03T12:00:18+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/05/03/use-figaro-to-configure-environment-variables</id>
    <content type="html"><![CDATA[<p>In developing web application, we must have some sensitive information that should be hidden. Using <code>figaro</code>, which place sensitive information in a Git-ignored YAML file, can offer this service for us.</p>

<h1>Install Figaro gem</h1>

<p>Add <code>figaro</code> gem in the Gemfile and run <code>bundle install</code></p>

<pre><code>gem "fiagro"
</code></pre>

<p>And then run installation:</p>

<pre><code>$ figaro install
</code></pre>

<p>This command will create a <code>application.yml</code> file in <code>config</code>, and this yml file will also be added in <code>.gitignore</code>. We can place our own configuration in here:
&#8220;`ruby application.yml
development:
  AWS_ACCESS_KEY_ID: xxxxxxxxxx
  AWS_SECRET_ACCESS_KEY: xxxxxxxxxx
  S3_BUCKET_NAME: xxxxxxxxxx</p>

<p>test:
  AWS_ACCESS_KEY_ID: xxxxxxxxxx
  AWS_SECRET_ACCESS_KEY: xxxxxxxxxx
  S3_BUCKET_NAME: xxxxxxxxxx</p>

<p>production:
  AWS_ACCESS_KEY_ID: xxxxxxxxxx
  AWS_SECRET_ACCESS_KEY: xxxxxxxxxx
  S3_BUCKET_NAME: xxxxxxxxxx
<code>``
For example, if you want to get</code>S3_BUCKET_NAME<code>, you use</code>ENV[&lsquo;S3_BUCKET_NAME&rsquo;]`.</p>

<h1>Set Configuration to Heroku</h1>

<p><code>figaro</code> offer an easy way to set remote Heroku configuration:</p>

<pre><code>$ figaro heroku:set -e production
</code></pre>

<p>This command will set environment variables to your application on the Heroku.</p>

<p>By the way, the environment option for the <code>heroku:set</code> is required. In above example, the environment is set to <code>production</code>. The default will be <code>development</code> if unspecified.</p>

<p>Reference from <a href="https://github.com/laserlemon/figaro">laserlemon/figaro</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Uploading on Amazon S3 with Carrierwave-aws]]></title>
    <link href="http://kmc653.github.io/blog/2015/04/30/file-uploading-on-amazon-s3-with-carrierwave-aws/"/>
    <updated>2015-04-30T12:10:17+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/04/30/file-uploading-on-amazon-s3-with-carrierwave-aws</id>
    <content type="html"><![CDATA[<p>Sometimes websites offer users to upload files or images. We can use Carrierwave-aws gem to upload files on Amazon S3 (Amazon simple Storage Service).</p>

<p>In the following example, I would like to upload large_cover and small_cover images of the videos. At first, create a migration to add a string column to the model:
<code>
$ rails g migration add_large_cover_and _small_cover_to_videos
$ rake db:migrate
</code></p>

<pre><code class="ruby 20150127011135_add_large_cover_and_small_cover_to_videos.rb">class AddLargeCoverAndSmallCoverToVideos &lt; ActiveRecord::Migration
  def change
    add_column :videos, :large_cover, :string
    add_column :videos, :small_cover, :string
  end
end
</code></pre>

<p>And then, open the <code>video</code> model and mount the uploader:
<code>ruby video.rb
class Video &lt; ActiveRecord::Base
  mount_uploader :large_cover, LargeCoverUploader
  mount_uploader :small_cover, SmallCoverUploader
end
</code></p>

<p>Create a <code>uploaders</code> directory in <code>app</code> directory, and put <code>large_cover_uploader.rb</code> and <code>small_cover_uploader.rb</code> files in here. In these two files, we can customize our uploader, such as the path of storage or the size of image, etc.</p>

<h1>Resize the image</h1>

<p>We should install <code>Imagemagick</code> and <code>MiniMagick</code> to do image resizing. MiniMagick is a Ruby interface for Imagemagick, so we should install Imagemagick first, and then install MiniMagick.</p>

<p>Add <code>carrierwave-aws</code> and <code>mini_magick</code>in Gemfile, and then run <code>bundle install</code>.
<code>ruby Gemfile
gem 'carrierwave-aws'
gem 'mini_magick'
</code></p>

<p>Customize the image size in the <code>large_cover_uploader</code> and <code>small_cover_uploader</code> files:</p>

<pre><code class="ruby large_cover_uploader.rb">class LargeCoverUploader &lt; CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick

  process :resize_to_fill =&gt; [655, 375]
end
</code></pre>

<pre><code class="ruby small_cover_uploader.rb">class SmallCoverUploader &lt; CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick

  process :resize_to_fill =&gt; [166, 236]
end
</code></pre>

<h1>Configure Amazon web service</h1>

<p>Before trying to use Amazon web service, we should apply an <a href="http://aws.amazon.com/">AWS</a> account first. After having an account, we should create a new user and get <code>Access Key</code> and <code>Secret Access Key</code> of this user. And then creating a <code>Bucket</code> for the web app. There&rsquo;s a blog we can follow: <a href="http://blog.danielle.tuckerlabs.com/post/60491757671/creating-a-simple-aws-s3-bucket-with-iam-access#_=_">http://blog.danielle.tuckerlabs.com/post/60491757671/creating-a-simple-aws-s3-bucket-with-iam-access#_=_</a> .</p>

<p>After creating a bucket, we should add a file called <code>carrierwave.rb</code>  in <code>/config/initializers</code>:
<code>ruby carrierwave.rb
CarrierWave.configure do |config|
  if Rails.env.staging? || Rails.env.production?
    config.storage    = :aws
    config.aws_acl    = :public_read
    config.aws_credentials = {
      access_key_id:      ENV.fetch('AWS_ACCESS_KEY_ID'),
      secret_access_key:  ENV.fetch('AWS_SECRET_ACCESS_KEY')
    }
    config.aws_bucket = ENV.fetch('S3_BUCKET_NAME')
  else
    config.storage = :file
    config.enable_processing = Rails.env.development?
  end
end
</code></p>

<p>Using <a href="https://github.com/laserlemon/figaro">Figaro</a> to configure environment variables which are set in the <code>application.yml</code> file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Sidekiq to Send Emails from Background Jobs]]></title>
    <link href="http://kmc653.github.io/blog/2015/01/31/use-sidekiq-to-send-emails-from-background-jobs/"/>
    <updated>2015-01-31T15:41:25+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/01/31/use-sidekiq-to-send-emails-from-background-jobs</id>
    <content type="html"><![CDATA[<p>In Rails application, we usually send emails to notify users of something. Sending emails would not be fast because it need to rely on third party service ( e.q., Google, Yahoo, Mailgun ). We can put sending action in background process to make sure that application won&rsquo;t be held up.</p>

<h1>Sidekiq</h1>

<p>We can use sidekiq to make the jobs running in the background. It will avoid our app getting stuck if one of the processes broke.</p>

<p>At first, add gem <code>sidekiq</code> in <code>Gemfile</code>, and then run <code>bundle install</code> from command line
<code>ruby Gemfile
gem 'sidekiq'
</code>
For instance, if we want to send an invitation email to user, the code should be
<code>ruby
AppMailer.send_invitation_email(@invitation).deliver
</code></p>

<p>Using <code>sidekiq</code>, we add <code>delay</code> to make sending action processing in background.
<code>ruby
AppMailer.delay.send_invitation_email(@invitation)
</code></p>

<p>We have to install <code>redis</code> server if we would like to set up background job processing locally. we can get Redis from here: <a href="http://redis.io/download">http://redis.io/download</a> .</p>

<p>Typing <code>redis-server</code> to run redis, and then type <code>bundle exec sidekiq</code> on application to execute sidekiq, and then run Rails applicaion server to send emails.</p>
]]></content>
  </entry>
  
</feed>
