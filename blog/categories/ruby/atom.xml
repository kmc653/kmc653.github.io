<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Mr. Anderson]]></title>
  <link href="http://kmc653.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kmc653.github.io/"/>
  <updated>2015-08-23T19:35:03+08:00</updated>
  <id>http://kmc653.github.io/</id>
  <author>
    <name><![CDATA[Kai-Min Change]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blocks, Procs, and Lambdas in Ruby]]></title>
    <link href="http://kmc653.github.io/blog/2015/08/23/blocks-procs-and-lambdas-in-ruby/"/>
    <updated>2015-08-23T18:25:35+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/08/23/blocks-procs-and-lambdas-in-ruby</id>
    <content type="html"><![CDATA[<p>You must heard that &ldquo;Ererything is an object in Ruby&rdquo; when you start to learn Ruby. However, <code>Blocks</code> are not objects. Because of this, blocks can&rsquo;t have any abilities like objects unless using <code>procs</code>.</p>

<h1>Proc</h1>

<p>We can name a block of code and turn it into a method by using <code>procs</code>, which means we can call it over and over without retype the block. This could avoid us from repeating codes.</p>

<p>For example,</p>

<pre><code>choose_even = Proc.new do |n|
  n.even?
end

(1..10).to_a.select(&amp;choose_even)   =&gt; [2, 4, 6, 8, 10]
</code></pre>

<p>Some methods, like <code>.map</code>, <code>.collect</code> and <code>.select</code>, normally take a block, so the <code>&amp;</code> is used to convert proc into a block.</p>

<pre><code>square = Proc.new { |x| x ** 2 }

[1, 2, 3].map(&amp;square)    =&gt; [1, 4, 9]
</code></pre>

<p>We can user <code>.call</code> method to call proc directly.</p>

<pre><code>test = Proc.new { puts "Hello!"}
test.call

=&gt; Hello!
</code></pre>

<p>By the way, we can pass ruby method name with a symbol.</p>

<pre><code>n_array = [1, 2, 3, 4, 5]
s_array = n_array.map(&amp;:to_s)   =&gt; ["1", "2", "3", "4", "5"]
</code></pre>

<h1>Lambda</h1>

<p><code>Lambda</code> is almost have the same behavior with <code>Proc</code>. <code>lambda { puts "Awesome!" }</code> is the same as <code>Proc.new { puts "Awesome!" }</code>.</p>

<pre><code>movies = ["spyder man", "bat man", "iron man"]
symbolize = lambda { |x| x.to_sym }

symbols = movies.collect(&amp;symbolize)  =&gt; [:"spyder man", :"bat man", :"iron man"]
</code></pre>

<p>The difference between <code>Proc</code> and <code>Lambda</code> is that:</p>

<ol>
<li><p>lambda will check the number of arguments passed to it. It will throw an error if we pass the wrong number of arguments. Whereas a proc will ignore unexpected arguments and assign <code>nil</code> to any missing.</p></li>
<li><p>When a lambda returns, it will go back to the calling method. However, proc won&rsquo;t go back to the calling method.</p></li>
</ol>


<p>Reference from <a href="http://www.codecademy.com">Codecademy</a> ruby course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hashes and Symbols in Ruby]]></title>
    <link href="http://kmc653.github.io/blog/2015/08/23/hashes-and-symbols/"/>
    <updated>2015-08-23T16:18:49+08:00</updated>
    <id>http://kmc653.github.io/blog/2015/08/23/hashes-and-symbols</id>
    <content type="html"><![CDATA[<h1>Hashes</h1>

<p>Ruby hashes are collections of key-value pairs. The key is unique and is associated with some value. For example:</p>

<pre><code>foods = {
  "American" =&gt; "hamburger",
  "Italian" =&gt; "spaghetti",
  "Chinese" =&gt; "dumpling"
}
</code></pre>

<p>We also can use <code>symbol</code> to be the key:</p>

<pre><code>foods = {
  :American =&gt; "hamburger",
  :Italian =&gt; "spaghetti",
  :Chinese =&gt; "dumpling"
}
</code></pre>

<p>It also can be represented like this without hash rocket <code>=&gt;</code> after Ruby 1.9 version:</p>

<pre><code>foods = {
  American: "hamburger",
  Italian: "spaghetti",
  Chinese: "dumpling"
}
</code></pre>

<h1>Symbols</h1>

<p>The key bahavior of <code>symbol</code> is that there&rsquo;s only one copy of any particular symbol at a given time, which is different from <code>string</code>. For example:</p>

<pre><code>puts "queens".object_id
puts "queens".object_id

puts :queens.object_id
puts :queens.object_id

=&gt; 70182068437220
   70182068393120
   538248
   538248
</code></pre>

<h1>Converting between symbols and strings</h1>

<p>We can use <code>to_s</code> and <code>to_sym</code> to convert between strings and symbols. For example:</p>

<pre><code>:NYPD.to_s =&gt; "NYPD"
"NYPD".to_sym =&gt; :NYPD
</code></pre>

<p>Reference from <a href="http://www.codecademy.com">Codecademy</a> ruby course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Usage of strip, slice and split Methods of String]]></title>
    <link href="http://kmc653.github.io/blog/2014/12/27/the-usage-of-method-number-strip-and-slice-of-string/"/>
    <updated>2014-12-27T19:49:30+08:00</updated>
    <id>http://kmc653.github.io/blog/2014/12/27/the-usage-of-method-number-strip-and-slice-of-string</id>
    <content type="html"><![CDATA[<h1>Strip</h1>

<p>The method <code>strip</code> is used in a string. Returning the same content of string with leading and trailing whitespace removed.</p>

<pre><code>"   Kevin   ".strip     #=&gt; "Kevin"
</code></pre>

<p>The string will be changed if we use <code>strip!</code>. Return <code>nil</code> means the string was not altered.</p>

<pre><code>"Kevin".strip!     #=&gt; nil
</code></pre>

<h1>Slice</h1>

<p>The method <code>slice</code> is used in a string.<br/>
* <em>slice( index ) => str or nil</em><br/>
* <em>slice( start, length ) => str or nil</em><br/>
* <em>slice( range ) => str or nil</em><br/>
* <em>slice( regexp ) => str or nil</em><br/>
* <em>slice( regexp, capture ) => str or nil</em><br/>
* <em>slice( match_str ) => str or nil</em></p>

<pre><code>"kevin".slice(3)     #=&gt; "i"  
"kevin".slice(3, 2)     #=&gt; "in"  
"kevin".slice(1..3)     #=&gt; "evi"  
"kevinaeiou".slice(/[aeiou][0...9]/)
"kevin".slice("v")     #=&gt; "v"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Usage of Collect &amp; Map Methods]]></title>
    <link href="http://kmc653.github.io/blog/2014/12/21/the-usage-of-collect-and-map-methods/"/>
    <updated>2014-12-21T22:57:15+08:00</updated>
    <id>http://kmc653.github.io/blog/2014/12/21/the-usage-of-collect-and-map-methods</id>
    <content type="html"><![CDATA[<h1>Collect</h1>

<ul>
<li><em>collect { | item | block } => array</em></li>
<li><em>collect => Enumerator</em></li>
</ul>


<p>The method <code>collect</code> is used in an array. Returns a new array with the results of executing block once for each element in array.<br/>
If no block is given, an enummerator is returned instead.</p>

<pre><code>['a', 'b', 'c'].collect{ |letter| letter.capitalize }     #=&gt; ["A", "B", "C"]
</code></pre>

<p>There is a concise way doing the same work:</p>

<pre><code>['a', 'b', 'c'].collect(&amp;:capitalize)     #=&gt; ["A", "B", "C"]
</code></pre>

<p>The element will be replaced with the value returned by block if adding a <code>!</code></p>

<pre><code>a = ['a', 'b', 'c'].collect!(&amp;:capitalize)
a     #=&gt; ["A", "B", "C"]
</code></pre>

<h1>Map</h1>

<ul>
<li><em>map { | item | block } => array</em></li>
<li><em>map => Enumerator</em></li>
</ul>


<p>The method <code>map</code> is also used in an array.</p>

<pre><code>a = ['a', 'b', 'c']
a.map { |x| x + x }     #=&gt; ["aa", "bb", "cc"]
</code></pre>

<p>There is also a shorthand way:</p>

<pre><code>['a', 'b', 'c'].map(&amp;:capitalize)     #=&gt; ["A", "B", "C"]
</code></pre>

<p>The element will be replaced with the value returned by block if adding a <code>!</code></p>

<pre><code>a = ['A', 'B', 'C']
a.map!(&amp;:downcase)
a     #=&gt; ["a", "b", "c"]
</code></pre>
]]></content>
  </entry>
  
</feed>
